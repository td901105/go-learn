参考文档：https://wangyi.one/go%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B001-go%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%BF%90%E8%A1%8C/#%E5%BC%95%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E5%8C%85
go mod 参考文档：https://cloud.tencent.com/developer/article/2020911
配置环境变量
在安装完 golang 后，还需了解三个环境变量，分别是GOROOT、GOPATH、PATH。下面来分别介绍一下它们的作用

GOROOT：GO 安装的根目录。
PATH：各个操作系统都存在的环境变量，用于指定系统可执行命令的默认查找路径。
GOPATH：用来设置工作目录，即编写代码的地方。包也都是从GOPATH设置的路径中寻找。

因为后面我们使用Goland这个 IDE 来创建项目，为了使每个项目相互隔离，使用不同的包，我们需要为每个项目设置不同的工作目录。


接下来，我们配置一下项目的目录结构：新建三个文件夹bin、pkg、src，创建go.mod包管理文件

bin文件目录：用于存放编译生成的可执行文件.exe
src文件目录：用于存放源代码
pkg文件目录：存放依赖包
go.mod包管理文件就放在src下面就行

go.mod:定义依赖库的 path 和版本
go.sum: 包含特定依赖包的版本内容的散列哈希值。
一般我们项目都是单 module 的形式，项目根目录下包含 go.mod 和 go.sum 文件，子文件夹定义 package，或者主文件夹也是一个 package。
但是一个项目也可以包含多个 module，只不过这种方式不常用而已。

通常情况下，你不需要手动编辑 go.mod，通过 go get，go mod 等命令来完成依赖管理的同时，go.mod 也会自动更新。

go get -u 将会升级到最新的次要版本或者修订版本(x.y.z, z是修订版本号， y是次要版本号)
go get -u=patch 将会升级到最新的修订版本
go get package@version 将会升级到指定的版本号version

以下是 go module 相关的一些命令:

go mod init: 初始化 go module
go mod download: 下载 go.mod 中的依赖到本地 Cache ($GOPATH/pkg/mod 下)
go mod vendor: 将项目依赖拷贝到 vendor 下
go mod tidy: 相当于 dep ensure，增加缺失的依赖(module)，丢掉没用的依赖(module)
go mod verify: 校验依赖
go mod edit: 编辑依赖，通过命令行手动升级或获取依赖
go list -m all: 列出当前项目(main module)的构建列表
